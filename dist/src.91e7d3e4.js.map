{"version":3,"sources":["src/index.js"],"names":["initWebGL","canvas","gl","getContext","e","console","log","toString","alert","vsSource","fsSource","fsSourceLines","loadShader","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","initShaderProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initBuffersPolygon","triangleVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","canva","document","getElementById","viewport","width","height","clearColor","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertexPositionAttribute","getAttribLocation","vertColorAttribute","enableVertexAttribArray","useProgram","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","matWorldUniformLocation","getUniformLocation","worldMatrix","glMatrix","mat4","identity","uniformMatrix4fv","FALSE","drawArrays","TRIANGLE_STRIP","canvas2","initBuffersCube","squareVerticesBuffer","shaderProgramCube","xRotationMatrix","yRotationMatrix","identityMatrix","angle","Math","PI","rotate","mul","TRIANGLES","canvas3","shaderProgramLineSquare","initBuffersSquare"],"mappings":"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","file":"src.91e7d3e4.js","sourceRoot":"..","sourcesContent":["function initWebGL(canvas) {\r\n    gl = null;\r\n    try { // Попытаться получить стандартный контекст.\r\n// Если не получится, попробовать получить экспериментальный.\r\n        gl = canvas.getContext(\"webgl2\") || canvas.getContext(\"webgl\") || canvas.getContext(\"experimentalwebgl\");\r\n    } catch (e) {\r\n        console.log(e.toString())\r\n    }\r\n// Если мы не получили контекст GL, завершить работу\r\n    if (!gl) {\r\n        alert(\"Unable to initialize WebGL. Your browser may not support it.\");\r\n        gl = null;\r\n    }\r\n    //canvas.width = window.innerWidth\r\n    //canvas.height = window.innerHeight\r\n    return gl;\r\n}\r\n\r\n\r\nconst vsSource =\r\n    'attribute vec3 vertPosition;\\n' +\r\n    'attribute vec3 vertColor;\\n' +\r\n    'varying vec3 fragColor;\\n' +\r\n    'varying vec3 fragPosition;\\n' +\r\n    'uniform mat4 mWorld;\\n' +\r\n    'void main()\\n' +\r\n    '{\\n' +\r\n    '  fragColor = vertColor;\\n' +\r\n    '  fragPosition = vertPosition;\\n' +\r\n    '  gl_Position = mWorld * vec4(vertPosition, 1.0);\\n' +\r\n    '}'\r\n\r\nconst fsSource = 'precision mediump float;\\n' +\r\n    'varying vec3 fragColor;\\n' +\r\n    'void main()\\n' +\r\n    '{\\n' +\r\n    '  gl_FragColor = vec4(fragColor, 1.0);\\n' +\r\n    '}'\r\n\r\nconst fsSourceLines = 'precision mediump float;\\n' +\r\n    'varying vec3 fragColor;\\n' +\r\n    'varying vec3 fragPosition;\\n' +\r\n    'void main()\\n' +\r\n    '{\\n' +\r\n    'int x = int(fragPosition.x * 10.0 + 5.0) ;\\n' +\r\n    'float shouldColorize = mod(float(x), 2.0);\\n' +\r\n    'if ((shouldColorize == 0.0)){\\n' +\r\n    'gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n' +\r\n    '}\\n' +\r\n    'else{' +\r\n    'gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);' +\r\n    '}\\n' +\r\n    '}'\r\n\r\nfunction loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n// Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n// Compile the shader program\r\n    gl.compileShader(shader);\r\n// See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    return shader;\r\n}\r\n\r\n\r\nfunction initShaderProgram(gl, vsSource, fsSource) {\r\n\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n    return shaderProgram;\r\n}\r\n\r\n\r\ncanva = document.getElementById(\"polygonCanvas\")\r\ninitWebGL(canva)\r\nif (gl) { // продолжать только если WebGL доступен и работает\r\n// Устанавливаем размер вьюпорта\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n// установить в качестве цвета очистки буфера цвета черный, полная непрозрачность\r\n    gl.clearColor(0.5, 0.5, .5, 1);\r\n// включает использование буфера глубины\r\n    gl.enable(gl.DEPTH_TEST);\r\n// определяет работу буфера глубины: более ближние объекты перекрывают дальние\r\n    gl.depthFunc(gl.LEQUAL);\r\n// очистить буфер цвета и буфер глубины\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\n\r\nfunction initBuffersPolygon() {\r\n    let triangleVerticesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesBuffer);\r\n\r\n    let vertices =\r\n        [\r\n            0.0, 0.0, 0.0, 1.0, 0.0, 0.0,\r\n            -0.6, -0.1, 0.0, 1.0, 0.0, 0.0,\r\n            0.0, -0.5, 0.0, 1.0, 0.0, 0.0,\r\n            -0.35, 0.5, 0.0, 1.0, 0.0, 0.0,\r\n            0.35, 0.5, 0.0, 1.0, 0.0, 0.0,\r\n            0.6, -0.1, 0.0, 1.0, 0.0, 0.0,\r\n            0.0, -0.5, 0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 0.0, 1.0, 0.0, 0.0,\r\n        ];\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n}\r\n\r\n\r\nconst shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\ninitBuffersPolygon()\r\nlet vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"vertPosition\");\r\nlet vertColorAttribute = gl.getAttribLocation(shaderProgram, \"vertColor\");\r\ngl.enableVertexAttribArray(vertexPositionAttribute);\r\ngl.enableVertexAttribArray(vertColorAttribute);\r\ngl.useProgram(shaderProgram);\r\n\r\ngl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 0);\r\ngl.vertexAttribPointer(vertColorAttribute, 3, gl.FLOAT, false, 6 * Float32Array.BYTES_PER_ELEMENT, 3 * Float32Array.BYTES_PER_ELEMENT);\r\n\r\nlet matWorldUniformLocation = gl.getUniformLocation(shaderProgram, 'mWorld');\r\n\r\nlet worldMatrix = new Float32Array(16);\r\nglMatrix.mat4.identity(worldMatrix);\r\n\r\ngl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);\r\n\r\ngl.drawArrays(gl.TRIANGLE_STRIP, 0, 7);\r\n\r\n\r\n// ============== Cube =============\r\n\r\nlet canvas2 = document.getElementById(\"cubeCanvas\");\r\ninitWebGL(canvas2)\r\nif (gl)\r\n{ // продолжать только если WebGL доступен и работает\r\n    // Устанавливаем размер вьюпорта\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    // установить в качестве цвета очистки буфера цвета черный, полная непрозрачность\r\n    gl.clearColor(0.5, 0.5, .5, 1);\r\n    // включает использование буфера глубины\r\n    gl.enable(gl.DEPTH_TEST);\r\n    // определяет работу буфера глубины: более ближние объекты перекрывают дальние\r\n    gl.depthFunc(gl.LEQUAL);\r\n    // очистить буфер цвета и буфер глубины\r\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);\r\n}\r\nfunction initBuffersCube()\r\n{\r\n    let squareVerticesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);\r\n\r\n    let vertices =\r\n        [ // X, Y, Z           R, G, B\r\n            // Front\r\n            -0.5, -0.5, -0.5,   0.5, 0.5, 0.5, // 3\r\n            -0.5, 0.5, -0.5,    0.5, 0.5, 0.5, // 1\r\n            0.5, 0.5, -0.5,     0.5, 0.5, 0.5, // 2\r\n\r\n            -0.5, -0.5, -0.5,   0.5, 0.5, 0.5, // 3\r\n            0.5, 0.5, -0.5,     0.5, 0.5, 0.5, // 2\r\n            0.5, -0.5, -0.5,     0.5, 0.5, 0.5, // 4\r\n\r\n            // Top\r\n            -0.5, 0.5, -0.5,    0.2, 0.7, 0.1, // 1\r\n            -0.5, 0.5, 0.5,    0.2, 0.7, 0.1, // 5\r\n            0.5, 0.5, 0.5,     0.2, 0.7, 0.1, // 6\r\n\r\n            -0.5, 0.5, -0.5,    0.2, 0.7, 0.1, // 1\r\n            0.5, 0.5, -0.5,     0.2, 0.7, 0.1, // 2\r\n            0.5, 0.5, 0.5,     0.2, 0.7, 0.1, // 6\r\n\r\n            // Bottom\r\n            -0.5, -0.5, -0.5,   0.1, 0.5, 0.0, // 3\r\n            0.5, -0.5, 0.5,     0.1, 0.5, 0.0, // 8\r\n            0.5, -0.5, -0.5,     0.1, 0.5, 0.0, // 4\r\n\r\n            -0.5, -0.5, -0.5,   0.1, 0.5, 0.0, // 3\r\n            0.5, -0.5, 0.5,     0.1, 0.5, 0.0, // 8\r\n            -0.5, -0.5, 0.5,   0.1, 0.5, 0.0, // 7\r\n\r\n            // Left\r\n            -0.5, -0.5, -0.5,   0.5, 0.0, 1.0, // 3\r\n            -0.5, 0.5, -0.5,    0.5, 0.0, 1.0, // 1\r\n            -0.5, -0.5, 0.5,   0.5, 0.0, 1.0, // 7\r\n\r\n            -0.5, 0.5, 0.5,    0.5, 0.0, 1.0, // 5\r\n            -0.5, 0.5, -0.5,    0.5, 0.0, 1.0, // 1\r\n            -0.5, -0.5, 0.5,   0.5, 0.0, 1.0, // 7\r\n\r\n            //Right\r\n            0.5, 0.5, -0.5,     0.2, 1.0, 0.1, // 2\r\n            0.5, -0.5, 0.5,     0.2, 1.0, 0.1, // 8\r\n            0.5, -0.5, -0.5,     0.2, 1.0, 0.1, // 4\r\n\r\n            0.5, 0.5, -0.5,     0.2, 1.0, 0.1, // 2\r\n            0.5, -0.5, 0.5,     0.2, 1.0, 0.1, // 8\r\n            0.5, 0.5, 0.5,     0.2, 1.0, 0.1, // 6\r\n\r\n            //Back\r\n            -0.5, 0.5, 0.5,    0.2, 0.3, 0.5, // 5\r\n            0.5, 0.5, 0.5,     0.2, 0.3, 0.5, // 6\r\n            -0.5, -0.5, 0.5,   0.2, 0.3, 0.5, // 7\r\n\r\n            0.5, -0.5, 0.5,     0.2, 0.3, 0.5, // 8\r\n            0.5, 0.5, 0.5,     0.2, 0.3, 0.5, // 6\r\n            -0.5, -0.5, 0.5,   0.2, 0.3, 0.5, // 7\r\n        ];\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n}\r\n\r\nconst shaderProgramCube = initShaderProgram(gl, vsSource, fsSource);\r\n\r\ninitBuffersCube()\r\nvertexPositionAttribute = gl.getAttribLocation(shaderProgramCube, \"vertPosition\");\r\nvertColorAttribute = gl.getAttribLocation(shaderProgramCube, \"vertColor\");\r\ngl.enableVertexAttribArray(vertexPositionAttribute);\r\ngl.enableVertexAttribArray(vertColorAttribute);\r\ngl.useProgram(shaderProgramCube);\r\n\r\nmatWorldUniformLocation = gl.getUniformLocation(shaderProgramCube, 'mWorld');\r\n\r\nworldMatrix = new Float32Array(16);\r\nglMatrix.mat4.identity(worldMatrix);\r\n\r\ngl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);\r\n\r\nlet xRotationMatrix = new Float32Array(16);\r\nlet yRotationMatrix = new Float32Array(16);\r\n\r\nvar identityMatrix = new Float32Array(16);\r\nglMatrix.mat4.identity(identityMatrix);\r\nvar angle = 0.25 * Math.PI;\r\nglMatrix.mat4.rotate(yRotationMatrix, identityMatrix, angle * 3, [0, 1, 0]);\r\nglMatrix.mat4.rotate(xRotationMatrix, identityMatrix, angle / 3, [1, 0, 0]);\r\nglMatrix.mat4.mul(worldMatrix, yRotationMatrix, xRotationMatrix);\r\ngl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);\r\n\r\ngl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 6*Float32Array.BYTES_PER_ELEMENT, 0);\r\ngl.vertexAttribPointer(vertColorAttribute, 3, gl.FLOAT, false, 6*Float32Array.BYTES_PER_ELEMENT, 3*Float32Array.BYTES_PER_ELEMENT);\r\n\r\ngl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n\r\ngl.drawArrays(gl.TRIANGLES, 0, 36);\r\n\r\n\r\n\r\nlet canvas3 = document.getElementById(\"squareCanvas\");\r\ninitWebGL(canvas3); // инициализация контекста GL – сами пишем\r\n\r\nconst shaderProgramLineSquare = initShaderProgram(gl, vsSource, fsSourceLines);\r\n// продолжать только если WebGL доступен и работает\r\n\r\nif (gl)\r\n{ // продолжать только если WebGL доступен и работает\r\n    // Устанавливаем размер вьюпорта\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    // установить в качестве цвета очистки буфера цвета черный, полная непрозрачность\r\n    gl.clearColor(0.5, 0.5, .5, 1);\r\n    // включает использование буфера глубины\r\n    gl.enable(gl.DEPTH_TEST);\r\n    // определяет работу буфера глубины: более ближние объекты перекрывают дальние\r\n    gl.depthFunc(gl.LEQUAL);\r\n    // очистить буфер цвета и буфер глубины\r\n    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);\r\n}\r\nfunction initBuffersSquare()\r\n{\r\n    let squareVerticesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);\r\n\r\n    let vertices =\r\n        [\r\n            -0.5, -0.5, 0.0,     0.2, 0.3, 0.5,\r\n            -0.5, 0.5, 0.0,     0.2, 0.3, 0.5,\r\n            0.5, -0.5, 0.0,     0.2, 0.3, 0.5,\r\n            0.5, 0.5, 0.0,     0.2, 0.3, 0.5,\r\n        ];\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n}\r\n\r\ninitBuffersSquare()\r\n\r\nvertexPositionAttribute = gl.getAttribLocation(shaderProgramLineSquare, \"vertPosition\");\r\nvertColorAttribute = gl.getAttribLocation(shaderProgramLineSquare, \"vertColor\");\r\ngl.enableVertexAttribArray(vertexPositionAttribute);\r\ngl.enableVertexAttribArray(vertColorAttribute);\r\ngl.useProgram(shaderProgramLineSquare);\r\n\r\nmatWorldUniformLocation = gl.getUniformLocation(shaderProgramLineSquare, 'mWorld');\r\n\r\nworldMatrix = new Float32Array(16);\r\nglMatrix.mat4.identity(worldMatrix);\r\n\r\ngl.uniformMatrix4fv(matWorldUniformLocation, gl.FALSE, worldMatrix);\r\n\r\ngl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 6*Float32Array.BYTES_PER_ELEMENT, 0);\r\ngl.vertexAttribPointer(vertColorAttribute, 3, gl.FLOAT, false, 6*Float32Array.BYTES_PER_ELEMENT, 3*Float32Array.BYTES_PER_ELEMENT);\r\n\r\ngl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n\r\ngl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);"]}